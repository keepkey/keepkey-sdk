/* tslint:disable */
/* eslint-disable */
/**
 * keepkey-desktop
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.85
 * Contact: bithighlander@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CosmosStdTx } from './CosmosStdTx';
import {
    CosmosStdTxFromJSON,
    CosmosStdTxFromJSONTyped,
    CosmosStdTxToJSON,
} from './CosmosStdTx';

/**
 * 
 * @export
 * @interface CosmosSignTx
 */
export interface CosmosSignTx {
    /**
     * 
     * @type {Array<number>}
     * @memberof CosmosSignTx
     */
    addressNList: Array<number>;
    /**
     * 
     * @type {CosmosStdTx}
     * @memberof CosmosSignTx
     */
    tx: CosmosStdTx;
    /**
     * 
     * @type {string}
     * @memberof CosmosSignTx
     */
    chainId: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosSignTx
     */
    accountNumber: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosSignTx
     */
    sequence: string;
    /**
     * 
     * @type {number}
     * @memberof CosmosSignTx
     */
    fee?: number;
}

/**
 * Check if a given object implements the CosmosSignTx interface.
 */
export function instanceOfCosmosSignTx(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "addressNList" in value;
    isInstance = isInstance && "tx" in value;
    isInstance = isInstance && "chainId" in value;
    isInstance = isInstance && "accountNumber" in value;
    isInstance = isInstance && "sequence" in value;

    return isInstance;
}

export function CosmosSignTxFromJSON(json: any): CosmosSignTx {
    return CosmosSignTxFromJSONTyped(json, false);
}

export function CosmosSignTxFromJSONTyped(json: any, ignoreDiscriminator: boolean): CosmosSignTx {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'addressNList': json['addressNList'],
        'tx': CosmosStdTxFromJSON(json['tx']),
        'chainId': json['chain_id'],
        'accountNumber': json['account_number'],
        'sequence': json['sequence'],
        'fee': !exists(json, 'fee') ? undefined : json['fee'],
    };
}

export function CosmosSignTxToJSON(value?: CosmosSignTx | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'addressNList': value.addressNList,
        'tx': CosmosStdTxToJSON(value.tx),
        'chain_id': value.chainId,
        'account_number': value.accountNumber,
        'sequence': value.sequence,
        'fee': value.fee,
    };
}

