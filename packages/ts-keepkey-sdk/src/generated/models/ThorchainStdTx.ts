/* tslint:disable */
/* eslint-disable */
/**
 * keepkey-desktop
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.79
 * Contact: bithighlander@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Msg } from './Msg';
import {
    MsgFromJSON,
    MsgFromJSONTyped,
    MsgToJSON,
} from './Msg';
import type { StdFee } from './StdFee';
import {
    StdFeeFromJSON,
    StdFeeFromJSONTyped,
    StdFeeToJSON,
} from './StdFee';
import type { StdSignature } from './StdSignature';
import {
    StdSignatureFromJSON,
    StdSignatureFromJSONTyped,
    StdSignatureToJSON,
} from './StdSignature';

/**
 * 
 * @export
 * @interface ThorchainStdTx
 */
export interface ThorchainStdTx {
    /**
     * 
     * @type {StdFee}
     * @memberof ThorchainStdTx
     */
    fee: StdFee;
    /**
     * 
     * @type {string}
     * @memberof ThorchainStdTx
     */
    memo?: string;
    /**
     * 
     * @type {Array<Msg>}
     * @memberof ThorchainStdTx
     */
    msg: Array<Msg>;
    /**
     * 
     * @type {Array<StdSignature>}
     * @memberof ThorchainStdTx
     */
    signatures: Array<StdSignature>;
}

/**
 * Check if a given object implements the ThorchainStdTx interface.
 */
export function instanceOfThorchainStdTx(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "fee" in value;
    isInstance = isInstance && "msg" in value;
    isInstance = isInstance && "signatures" in value;

    return isInstance;
}

export function ThorchainStdTxFromJSON(json: any): ThorchainStdTx {
    return ThorchainStdTxFromJSONTyped(json, false);
}

export function ThorchainStdTxFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThorchainStdTx {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fee': StdFeeFromJSON(json['fee']),
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
        'msg': ((json['msg'] as Array<any>).map(MsgFromJSON)),
        'signatures': ((json['signatures'] as Array<any>).map(StdSignatureFromJSON)),
    };
}

export function ThorchainStdTxToJSON(value?: ThorchainStdTx | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fee': StdFeeToJSON(value.fee),
        'memo': value.memo,
        'msg': ((value.msg as Array<any>).map(MsgToJSON)),
        'signatures': ((value.signatures as Array<any>).map(StdSignatureToJSON)),
    };
}

