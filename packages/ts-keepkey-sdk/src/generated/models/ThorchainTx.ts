/* tslint:disable */
/* eslint-disable */
/**
 * keepkey-desktop
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: support@keepkey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ThorchainMsg } from './ThorchainMsg';
import {
    ThorchainMsgFromJSON,
    ThorchainMsgFromJSONTyped,
    ThorchainMsgToJSON,
} from './ThorchainMsg';
import type { ThorchainStdFee } from './ThorchainStdFee';
import {
    ThorchainStdFeeFromJSON,
    ThorchainStdFeeFromJSONTyped,
    ThorchainStdFeeToJSON,
} from './ThorchainStdFee';
import type { ThorchainStdSignature } from './ThorchainStdSignature';
import {
    ThorchainStdSignatureFromJSON,
    ThorchainStdSignatureFromJSONTyped,
    ThorchainStdSignatureToJSON,
} from './ThorchainStdSignature';

/**
 * 
 * @export
 * @interface ThorchainTx
 */
export interface ThorchainTx {
    /**
     * 
     * @type {Array<ThorchainMsg>}
     * @memberof ThorchainTx
     */
    msg: Array<ThorchainMsg>;
    /**
     * 
     * @type {ThorchainStdFee}
     * @memberof ThorchainTx
     */
    fee: ThorchainStdFee;
    /**
     * 
     * @type {Array<ThorchainStdSignature>}
     * @memberof ThorchainTx
     */
    signatures: Array<ThorchainStdSignature>;
    /**
     * 
     * @type {string}
     * @memberof ThorchainTx
     */
    memo?: string;
}

/**
 * Check if a given object implements the ThorchainTx interface.
 */
export function instanceOfThorchainTx(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "msg" in value;
    isInstance = isInstance && "fee" in value;
    isInstance = isInstance && "signatures" in value;

    return isInstance;
}

export function ThorchainTxFromJSON(json: any): ThorchainTx {
    return ThorchainTxFromJSONTyped(json, false);
}

export function ThorchainTxFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThorchainTx {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'msg': ((json['msg'] as Array<any>).map(ThorchainMsgFromJSON)),
        'fee': ThorchainStdFeeFromJSON(json['fee']),
        'signatures': ((json['signatures'] as Array<any>).map(ThorchainStdSignatureFromJSON)),
        'memo': !exists(json, 'memo') ? undefined : json['memo'],
    };
}

export function ThorchainTxToJSON(value?: ThorchainTx | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'msg': ((value.msg as Array<any>).map(ThorchainMsgToJSON)),
        'fee': ThorchainStdFeeToJSON(value.fee),
        'signatures': ((value.signatures as Array<any>).map(ThorchainStdSignatureToJSON)),
        'memo': value.memo,
    };
}

