/* tslint:disable */
/* eslint-disable */
/**
 * keepkey-desktop
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.4
 * Contact: support@keepkey.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

/**
 * 
 */
export class DeviceInfoEndpointsApi extends runtime.BaseAPI {

    /**
     */
    async getCoinTableRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/getCoinTable`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getCoinTable(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getCoinTableRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getDeviceIDRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/getDeviceID`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getDeviceID(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getDeviceIDRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getFirmwareVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/getFirmwareVersion`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getFirmwareVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getFirmwareVersionRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getLabelRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/getLabel`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getLabel(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getLabelRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getModelRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/getModel`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getModel(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getModelRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getNumCoinsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/getNumCoins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getNumCoins(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getNumCoinsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getVendorRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/getVendor`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getVendor(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getVendorRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async hasOnDeviceDisplayRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/hasOnDeviceDisplay`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async hasOnDeviceDisplay(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.hasOnDeviceDisplayRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async hasOnDevicePassphraseRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/hasOnDevicePassphrase`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async hasOnDevicePassphrase(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.hasOnDevicePassphraseRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async hasOnDevicePinEntryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/hasOnDevicePinEntry`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async hasOnDevicePinEntry(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.hasOnDevicePinEntryRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async hasOnDeviceRecoveryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/hasOnDeviceRecovery`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async hasOnDeviceRecovery(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.hasOnDeviceRecoveryRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async isInitializedRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/isInitialized`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async isInitialized(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.isInitializedRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async isLockedRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/isLocked`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async isLocked(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.isLockedRaw(initOverrides);
        return await response.value();
    }

}
