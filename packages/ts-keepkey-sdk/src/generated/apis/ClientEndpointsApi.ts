/* tslint:disable */
/* eslint-disable */
/**
 * keepkey-desktop
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.14
 * Contact: bithighlander@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenericResponse,
  PairBody,
  PairResponse,
  UserType,
} from '../models';
import {
    GenericResponseFromJSON,
    GenericResponseToJSON,
    PairBodyFromJSON,
    PairBodyToJSON,
    PairResponseFromJSON,
    PairResponseToJSON,
    UserTypeFromJSON,
    UserTypeToJSON,
} from '../models';

export interface PairRequest {
    authorization: string;
    pairBody: PairBody;
}

/**
 * 
 */
export class ClientEndpointsApi extends runtime.BaseAPI {

    /**
     */
    async deviceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/device`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async device(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deviceRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async pairRaw(requestParameters: PairRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PairResponse>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling pair.');
        }

        if (requestParameters.pairBody === null || requestParameters.pairBody === undefined) {
            throw new runtime.RequiredError('pairBody','Required parameter requestParameters.pairBody was null or undefined when calling pair.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/pair`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PairBodyToJSON(requestParameters.pairBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PairResponseFromJSON(jsonValue));
    }

    /**
     */
    async pair(requestParameters: PairRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PairResponse> {
        const response = await this.pairRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async statusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async status(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.statusRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async userRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserTypeFromJSON(jsonValue));
    }

    /**
     */
    async user(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserType> {
        const response = await this.userRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async verifyAuthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // api_key authentication
        }

        const response = await this.request({
            path: `/auth/verify`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericResponseFromJSON(jsonValue));
    }

    /**
     */
    async verifyAuth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericResponse> {
        const response = await this.verifyAuthRaw(initOverrides);
        return await response.value();
    }

}
